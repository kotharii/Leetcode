# Problem (link):- https://leetcode.com/problems/longest-consecutive-sequence/description/

# Notes-
# 
# 1- 
# 2- 

# Solution 1: # TC - O(n log n) SC - O(1)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        length = 1
        if len(nums) < 1:
            length = 0
        nums.sort()
        print(nums)
        count = 0
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1] + 1:
                length += 1
            elif nums[i] == nums[i-1]:
                continue
            else:
                if count <= length:
                    count = length
                length = 1
        if length > count:
            return length
        else:
            return count

# Solution 2: # # TC - O(n) SC - O(n)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        Numset = set(nums)
        length = 0
        count = 0
        for num in Numset:
            if (num - 1) in Numset:
                continue
            else:
                while (num + length) in Numset:
                    length += 1
                count = max(length, count)
                length = 0
        return count
    
# Solution 3: # TC - O(n) SC - O(n) --> but in actuality beats 100% other users in TC and SC
def longestConsecutive(t):
    print(t)
    s = set(t)
    print(s)
    q = 0
    while s:
        n = s.pop()
        l = n - 1
        while l in s:
            s.remove(l)
            l-=1
        h = n + 1
        while h in s:
            s.remove(h)
            h+=1
        q = max(q, h-l-1)
    return q
with open('user.out', 'w') as f:
    for c in map(loads, stdin):
        f.write(f"{longestConsecutive(c)}\n")
exit(0)

# Solution Methods:-
    # 1- A naive approach where you just sort the nums to achieve a solution just to understand how are you going to implement the checking system where you count
        #  the length of the other nums in the list in order to understand how would you place conditions in order to calculate the length.
    # 2- an approach where you would use the technique of finding the starting of a sequence and then go through all the elements ahead of it in order to count the
        #  length of the sequence.
    # 3- A very smart approach where no matter what number you get from the set, you smartly find a way to count both the prefix of the number you have been given
        #  and also the postfix of the number you have been given at the same time so you just traverse the list once and do not visit any number another time. The removal
        #  of the number once it has been considered is key.


# Thoughts on the Problem and Challenges:-
    # how to use a hash table to your advantage
    # trying to think how can i utilize the relation between the values that i am going to count the length of 

# Learnings for a beginner in this problem:-
    # 1- 


# Date - 29/05/24
# Time - 10