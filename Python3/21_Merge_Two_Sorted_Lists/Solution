# Problem (link):- https://leetcode.com/problems/merge-two-sorted-lists/

# Notes-
# 1- This is relatively a tough question, since it is not easy to strike that a dummy node would have to be used, otherwise you will end up writing a lengthy and
#  too complicated algorithm.

# Solution 1: # TC - O(n+m) - this is becuase its  a linked list you will have to travel through all the elements once in order to do anything and so we do travel all
#  the nodes in the linked list in order to reverse them but in this case its only true in the worst case scenario, if there is a case where list 1 or 2 gets over 
# really early then we just provide the pointer to the other list and this saves us time going through that other list entierly. 
# SC - O(m+n) since we are creating a new node(using ListNode) every time when we want to add a node from the list1 or list2 because it is the correct node in the
# sorted list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if not list1:
            return list2
        elif not list2:
            return list1
        else:
            if list1.val <= list2.val:
                list3 = ListNode(list1.val)
                list4 = list3
                list1 = list1.next
            else:
                list3 = ListNode(list2.val)
                list4 = list3
                list2 = list2.next
            while list1 and list2:
                if list1.val <= list2.val:
                    list3.next = ListNode(list1.val)
                    list3 = list3.next
                    list1 = list1.next
                else:
                    list3.next = ListNode(list2.val)
                    list3 = list3.next
                    list2 = list2.next
            if not list1:
                list3.next = list2
            elif not list2:
                list3.next = list1
        return list4
        
# Solution 2: TC - O(n+m) - this is becuase its  a linked list you will have to travel through all the elements once in order to do anything and so we do travel all
# the nodes in the linked list in order to reverse them but in this case its only true in the worst case scenario, if there is a case where list 1 or 2 gets over 
# really early then we just provide the pointer to the other list and this saves us time going through that other list entierly. 
#  SC - O(1) - this is O(1) because in this we are just creating one ListNode and for the others we are just updating our pointers and so its O(1).
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        current = dummy

        while list1 and list2:
            if list1.val <= list2.val:
                current.next = list1
                list1 = list1.next
            else:
                current.next = list2
                list2 = list2.next
            current = current.next

        if list1:
            current.next = list1
        elif list2:
            current.next = list2
        
        return dummy.next

# Solution Methods:-
    # 1- In this solution I am traversing the linked lists and such that everytime i find a linkedlist element from either of the lists, then i create a new node and
    #  add it to a third list which contains of all the nodes in a sorted manner.
    # 2- This solution is exactly the same as above except for 2 things, 1- instead of creating a new node everytime it just updates the pointers which is obviously
    #  the main move that is imprtant as hell, and the second thing is the usage of the dummy node which really proves useful because it makes the code concise and
    #  easy to read.

# Thoughts on the Problem and Challenges:-
    # 1- This is a little bit difficult because one will have to realize either the dummy node trick or atleast that they will have to create new listnodes, cause
    #  if they try to do it without any of htese two methods, its going to be trouble and a lot of chaos.

# Learnings for a beginner in this problem:-
    # 1- how to use a dummy node.


# Date - 18/06/24
# Time - 30 min