# Problem (link):- https://leetcode.com/problems/two-sum/description/

# Notes-
# 1- The question clearly gives the hint that there exists exactly one solution, so you definitely know that there will be no case when target - nums[i] would not be
#  present in the nums list (where nums[i] is the current value you are pointing to).
# 2- TC - O(n) since time complexity for this is O(n) for looping through all the values in the nums array in the worst case scenario the target will be the sum of
#  the elemetns which will be presnt at mid and mid+1.
# SC - O(1) since no extra space is taken to solve the problem.

# Solution 1: # TC - O(n) since in the worst case scenario the summation of numbers which is equal to the target are present at index mid and mid+1 of the initial
#  numbers array provided. SC - O(1) since no extra space is used.
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l = 0
        r = len(numbers) - 1
        while l <= r:
            sum = numbers[l] + numbers[r]
            if sum == target:
                return [l+1, r+1]
            elif sum > target:
                r -= 1
            else:
                l += 1


# Solution 2: # TC - O(nlogn). n since it first loops over the numbers list in order to take a value and then log n since it using binary search through the entire
#  list tries to find the value(target - elements being currently considered in the initial for loop). SC - O(1)
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        for i in range(len(numbers)):
            num = target - numbers[i]
            l = 0
            r = len(numbers) - 1
            while l <= r:
                mid = (l + r) //2
                if num < numbers[mid]:
                    r = mid - 1
                elif num > numbers[mid]:
                    l = mid + 1
                elif num == numbers[mid] and mid != i:
                    return [i+1, mid+1]

# Solution Methods:-
    # 1- Since you realize that you will have to look through the other numbers after having considered one number in order to find the target - nums[i] element and
    #  you cannot use any extra space but since this array is sorted so you have to take advantage of that and the best way to take advanatge of it is to use two 
    # pointers where according to the sum that is btained of the two numbers you decide if you want to increment l or decrement r and find the solution.

    # 2- A naive approach where you simply traverse the list using a loop to pick the first element and then put another loop inside of it in order to make the 
    # binary search possible to find the target - first element in the list.


# Thoughts on the Problem and Challenges:-
    # USAGE OF two pointers method
    # Take advantage of the fact that it is a sorted list.

# Learnings for a beginner in this problem:-
    # 1- how to take advantage of a sorted list.
    # 2- how to use two pointer method.


# Date - 03/06/24
# Time - 20 min