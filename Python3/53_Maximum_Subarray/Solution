# Notes - this is a little bit difficult approach to come up with but if you spend some time thinking you can come up with the answer
#  of only one pass.

# READ KADANE's ALGORITHM IN DETAIL, This is the most common and efficient approach to solve the Maximum Subarray problem. Kadaneâ€™s 
# Algorithm operates with a time complexity of O(n) and works by iterating through the array, at each step calculating the maximum
#  subarray sum ending at the current position. It keeps track of the maximum subarray sum found so far.

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if nums[0] < 0:
            cursum = 0
        else:
            cursum = nums[0]
        maxsum = nums[0]
        for i in range(1, len(nums)):
            cursum = cursum + nums[i]
            maxsum = max(maxsum, cursum)
            if cursum < 0:
                cursum = 0
        return maxsum