# Problem (link):- https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

# Notes-
# 1- think of ways as to how can you update the values of max and min and only calculate the profit if the updates values of max and min are giving
#  you a greater profit than the current profit amount.

# Solution 1: # TC - O(n) SC - O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        minimum = (float('inf'), -1)
        maximum = (0, -1)
        difference = 0
        for i in range(len(prices)):
            if prices[i] < minimum[0]:
                minimum = (prices[i], i)
                maximum = (0, i)
            if i > minimum[1]:
                maximum = max(maximum, (prices[i], i))
                difference = max(maximum[0] - minimum[0], difference)
        return difference


# Solution 2: # TC - O(n) SC - O(1). The simple two pointer method which simply does thw work of always updating the pointer to the overall max and
    #  min but always keeping the maximum profit safe until the new difference between the max and min superceeds it.
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        l = 0
        r = 1
        profit = 0
        while r < len(prices):
            if prices[r] < prices[l]:
                l = r
                r += 1
            else:
                profit = max(profit, prices[r] - prices[l])
                r += 1
        return profit

# Solution 3: A concise way to do the same done above, but this minor changes in efficiency can provide much lesser time and space in competitive
    #  programming platforms.
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        minPrice = float('inf')
        maxProfit = 0
        for i in range(len(prices)):
            if prices[i] < minPrice:
                minPrice = prices[i]
            elif prices[i] - minPrice > maxProfit:
                maxProfit = prices[i] - minPrice
        return maxProfit

# Solution Methods:-
    # 1- A naive approach where you traverse the prices list and try to put on conditions where you can finally update the maximum profit only if it
    #  is greater than the profit it was before the new max and min and storing those values in variables for future comparision.
    
    # 2- The simple two pointer method which simply does thw work of always updating the pointer to the overall max and
    #  min but always keeping the maximum profit safe until the new difference between the max and min superceeds it.

    # 3- Concise method to do the same as above.


# Thoughts on the Problem and Challenges:-
    # USAGE OF two pointers method
    # need to calculate profit as less time as possible

# Learnings for a beginner in this problem:-
    # 1- how to use two pointer method.


# Date - 03/06/24
# Time - 10 min