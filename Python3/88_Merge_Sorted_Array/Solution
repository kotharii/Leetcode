# Problem (link):- https://leetcode.com/problems/merge-sorted-array/?envType=study-plan-v2&envId=top-interview-150

# My Note-
# 1- Notice as soon as you come across the word "non-decreasing order" it means that there CAN be DUPLICATES present in this.
# 2- TC - O(m+n) since in the worst case scenario we might have to loop through all the elements in the nums1 and nums2 array(when atleast 1 nums2 element is smaller
#  than nums1[0])
#  SC - O(1) since we are not using any extra space than the one we are already provided by the question. (if you are confused as to why arent we considering the
#  space that is used by nums1 and nums2's list, then you must know that space complexity is calculated based on how mucn space does the solution require which 
# DOES NOT involve the space that is used by the question itself.

# Solution 1: # TC - O(m+n) SC - O(1)
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        while m or n > 0:
            if n == 0:
                break
            elif m == 0 and n != 0:
                nums1[:n] = nums2[:n]
                n -= n
            if nums2[n-1] >= nums1[m-1]:
                nums1[n+m-1] = nums2[n-1]
                n -= 1
            else:
                nums1[n+m-1] = nums1[m-1]
                m -= 1

# Solution Methods:-
    # 1- In this approach we are taking advantage of the fact that the elements in both the list's are in non-decreasing order so we compare all the elements from
    # last to first between both the lists and whichever has the higher value will be placed starting from m+n position while m and n will be constantly decreased
    #  after each placement. This will make sure that the elements are placeed in such a manner that they are already sorted when the placement is finished.
            
    # written in very basic methodology:-
    # We can start with two pointers i and j, initialized to m-1 and n-1, respectively. We will also have another pointer k initialized to m+n-1, which will be used
    # to keep track of the position in nums1 where we will be placing the larger element. Then we can start iterating from the end of the arrays i and j, and compare
    # the elements at these positions. We will place the larger element in nums1 at position k, and decrement the corresponding pointer i or j accordingly. We will
    # continue doing this until we have iterated through all the elements in nums2. If there are still elements left in nums1, we don't need to do anything because
    # they are already in their correct place.

# Thoughts on the Problem and Challenges:-
    # Noticing that duplicates can exists since non-decreasing word is there
    # taking advantage of the fact that both the lists are already sorted
    # taking advantage of the fact that n and m are given
    # also furthermore taking hint from the challenege in the question telling you to do it in O(m+n) is a very big hint.
                
# Learnings for a beginner in this problem:-
    # 1- understand indexing in a list very well
    # 2- why starting from the back and moving towards the front.
