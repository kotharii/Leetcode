# Problem (link):- https://leetcode.com/problems/alien-dictionary/description/ or https://www.lintcode.com/problem/892/

# Notes-
# 1- This is a bit difficult sum only because of the existence of many various condition that one has to keep in mind in order to be able to solve it compeltely.
# 2- Make sure you know about topological sort before you start solving this.

# Solution 1: # TC - O(n*m) = O(n*m)+(negligible-for the for loop over unique characters unless all characters are unique across all words in the words list)+(n*m) + 
# (negligible for the loop of topological sort because the for node in in_degree code runs for unique nuber of character times and the while and the for loop run for unique
#  character length) --> where n is the amount of word string there are present within the words list, m is the amount of letters on average there are present within all the
#  words inside the words list.
#  SC - O(n+m) for graph dictionary space + O(negligible counting it as O(1) ceuase takes space of unique number of characters, worst case scenario 26) + O(1) for unique
#  character set cause worst case scenario 26 + O(1) heap unique characters + O(1) for stringer string letters(unique letters only)
from typing import (
    List,
)
# from collections import deque
import heapq
class Solution:
    """
    @param words: a list of words
    @return: a string which is correct order
    """
    def alien_order(self, words: List[str]) -> str:
        n = len(words)
        graph = {}
        in_degree = {}
        unique_chars = set()
        for word in words:
            for c in word:
                unique_chars.add(c)

        for letter in unique_chars:
            graph[letter] = []
            in_degree[letter] = 0
        for i in range(n-1):
            if len(words[i]) > len(words[i+1]) and words[i+1] == words[i][:len(words[i+1])]:
                return ""
            else:
                small = min(len(words[i]), len(words[i+1]))
                for j in range(small):
                    if words[i][j] == words[i+1][j]:
                        continue
                    else:
                        if words[i+1][j] in graph[words[i][j]]:
                            break
                        else:
                            graph[words[i][j]].append(words[i+1][j])
                            in_degree[words[i+1][j]] += 1
                        break

        stringer = ""
    
        heap = []
        
        for node in in_degree:
            if in_degree[node] == 0:
                heapq.heappush(heap, node)
        while heap:
            word = heapq.heappop(heap)
            stringer += word
            for neighbor in graph[word]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    heapq.heappush(heap, neighbor)
        if len(stringer) == len(unique_chars):
            return stringer
        else:
            return ""
# Solution Methods:-
    # 1- First you need to compare the current word you are considering with the word that is after it and make sure you skip over letters that are the same ones and for the
    #  first different letter you come cross you have to make sure you craete a graph in order to maintain this relationship and utilize it late , later you understand that
    #  you will need topological sorting to be done in order to understand the ordering of the nodes in the graph one after the other and so you will earlier also have to
    #  maintain an indegree and dont forget the edge case where if there are muktiple nodes in teh first place when you are consdiering to add nodes into the heap because
    #  they have an indegree of 0 then you should use human lexicograph dictionary in order to determine their precedence.


# Thoughts on the Problem and Challenges:-
    # If you can just follow the constraints closely and keep them in mind and check it is not very difficult.

# Learnings for a beginner in this problem:-
    # 1- Topological Sort


# Date - 28/09/24
# Time - 1hr