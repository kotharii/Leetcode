# Problem (link):- https://leetcode.com/problems/maximum-depth-of-binary-tree/

# Notes-
# 1- This is an easy question, since in this one, one just needs to realize that in order to find the maximum depth you at the end of the day just pass a number from
#  the children nodes to its parent telling the depth level.
# Try coming up with an iterative solution instead of recursive, Iterative > Recursive 

# Solution 1: # TC - O(n) - going through each node once in order to know how much depth there is on that subtree.
# SC - O(n) - having the entire tree in the worst case scenario within the call stack
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        left_node = self.maxDepth(root.left)
        right_node = self.maxDepth(root.right)
        if not right_node and not left_node:
            return 1
        elif right_node >= left_node:
            return right_node + 1
        else:
            return left_node + 1
    

# Solution 2: # TC - O(n) - going through each node once while checking if it has children or not and if it does then increasing the depth level.
# SC - O(n) - can have in the worst case scenario n elements within the queue or also n/2 which would bring a space complexity of O(n)
class Solution:
    from collections import deque
    
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        
        queue = deque([root])
        depth = 0
        
        while queue:
            level_size = len(queue)
            for _ in range(level_size):
                current = queue.popleft()
                
                if current.left:
                    queue.append(current.left)
                if current.right:
                    queue.append(current.right)
                    
            depth += 1
        
        return depth

# Solution Methods:-
    # 1- In this solution I first recursively reach the leaf node and from there on out, I just pass onto the parent nodes the depth level incrementally. Leaf nodes
    #  return 1, and otherwise since there can be left children nodes and right children nodes and any one can have more number of children so then the parent taking
    #  the one who has a higher number of childrens and therefore depth.
    # 2- This is the same solution just in Iteratvie format, where in the only change is we first take the root node and from there on out considering the level at
    #  which the childrens are at we increment the depth level.

# Thoughts on the Problem and Challenges:-
    # 1- None

# Learnings for a beginner in this problem:-
    # 1- how to traverse and consider levels in a tree
    # The 3 reasons everybody should know why Iterative solutions are better than Recursive Solutions:
    # Stack Space Usage:

    # Iterative: Iterative solutions use the stack space for only a few variables, which makes them more memory-efficient.
    # Recursive: Recursive solutions use the call stack extensively, which can lead to stack overflow if the recursion depth is too deep. Each function call adds a 
    # new frame to the call stack, consuming more memory.
    # Function Call Overhead:

    # Iterative: Iterative solutions have lower overhead because they avoid the extra cost associated with multiple function calls. Each function call in recursion
    #  has an overhead due to saving the function state, arguments, and returning from the function.
    # Recursive: Recursive solutions can incur significant overhead due to the large number of function calls, especially for deep recursions. This overhead can slow
    #  down the execution.
    # Cache Performance and Locality of Reference:

    # Iterative: Iterative solutions often have better cache performance due to more predictable and linear memory access patterns. This predictability results in
    #  fewer cache misses and better overall efficiency.
    # Recursive: Recursive solutions can suffer from poor cache performance because of the more scattered and less predictable memory access patterns, which can
    #  result in higher cache miss rates.


# Date - 26/06/24
# Time - 10 mins




        

